// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	model "InstagramMock-v2/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IPostRepository is an autogenerated mock type for the IPostRepository type
type IPostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: post
func (_m *IPostRepository) Create(post model.Post) (model.Post, error) {
	ret := _m.Called(post)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(model.Post) model.Post); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: postID
func (_m *IPostRepository) Delete(postID uint64) error {
	ret := _m.Called(postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: postID
func (_m *IPostRepository) FindByID(postID uint64) (model.Post, error) {
	ret := _m.Called(postID)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(uint64) model.Post); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *IPostRepository) ShowAll() ([]model.Post, error) {
	ret := _m.Called()

	var r0 []model.Post
	if rf, ok := ret.Get(0).(func() []model.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: post
func (_m *IPostRepository) Update(post model.Post) (model.Post, error) {
	ret := _m.Called(post)

	var r0 model.Post
	if rf, ok := ret.Get(0).(func(model.Post) model.Post); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPostRepository creates a new instance of IPostRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostRepository(t testing.TB) *IPostRepository {
	mock := &IPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
